class Linkedlist{
   Node head;
   class Node{
        int data;
        Node next;
        Node(int data){
            this.data=data;
            this.next=null;
        }
    }
    public Node getReverse(Node head){
        Node prev=null;
        Node curr=head;
        while(curr!=null){
            Node nextNode =curr.next;
            curr.next=prev;
            prev=curr;
            curr=nextNode;
        }
       return prev;
    }
    public Node getMiddle(Node head){
    
        Node slow=head;
        Node fast=head;
        while(fast.next!=null && fast.next.next!=null){
            slow=slow.next;
            fast=fast.next.next;
        }
        return slow;
    }
    
   public boolean isPalindrome(){
       if(head==null||head.next==null){
           return true;
       }
       Node firstHalfEnd= getMiddle(head);
       Node secondHalfStart=getReverse(firstHalfEnd.next);
       Node firstHalfStart=head;
       
       while(secondHalfStart!=null){
           if(secondHalfStart.data!=firstHalfStart.data){
              return false;
           }
           secondHalfStart=secondHalfStart.next;
           firstHalfStart=firstHalfStart.next;
           
          }
         return true;
       }
     
   
    public void addNode(int data){
        Node newNode= new Node(data);
        if(head==null){
            head=newNode;
        }
        else{
            newNode.next=head;
            head=newNode;
        }
    }
    public void printList(){
        Node temp=head;
        while(temp!=null){
            System.out.print(temp.data +"-->");
            temp=temp.next;
        }
        System.out.println("NULL");
    }
}

public class Main
{
	public static void main(String[] args) {
	Linkedlist list=new Linkedlist();
	list.addNode(1);
	list.addNode(2);
	list.addNode(3);
	list.addNode(2);
	list.addNode(1);
   System.out.println(list.isPalindrome());
	   
	}
}
